@ /video root:video {
  .meta [map graph.comment {FUNKY ORIGAMI - video patch

Single video sketch accepts FFT data from audio
patch and renders 3D shapes.}]
  .renderer OpenGL
  .width 1024
  .height 768
  @ ./output-1 video:output {
    .meta [map graph.x 1093 graph.y 271]
    .title "FUNKY ORIGAMI"
    .width 1820
    .height 1080
    .always-on-top true
    .undecorated true
    .show-cursor true
  }
  @ ./fft-vis video:gl:p3d {
    .meta [map graph.x 88 graph.y 199 expose [array fft]]
    .code {import java.io.IOException;

    @In(1) PImage in;

    @Inject Property x, y, z;
    
    @Persist float[] fft;

    int tubeRes = 24;
    double[] tubeX = new double[tubeRes];
    double[] tubeY = new double[tubeRes];

    @Override
    public void setup() {
        double angle = 360.0 / tubeRes;
        for (int i = 0; i < tubeRes; i++) {
            tubeX[i] = cos(radians(i * angle));
            tubeY[i] = sin(radians(i * angle));
        }
        stroke(220);
    }

    @Override
    public void draw() {
        
        if (fft == null) {
            return;
        }
        
        if (!x.isAnimating()) {
            x.to(random(1)).in(randomOf(1,2,4)).easeInOut();
            y.to(random(1)).in(randomOf(1,2)).easeInOut();
            z.to(random(1)).in(1).easeInOut();
        }
        
        pushMatrix();
        translate(width/2, height/2);
        scale(-1.05);
        blendMode(ADD);
        tint(240,220,200,200);
        image(in,-width/2,-height/2);
        blendMode(BLEND);
        popMatrix();
        if (fft.length < tubeRes + .4) {
            return;
        }
        translate(width / 2, height / 2);
        scale(3);
        rotateX(map(D(x), 0, .5, -PI, PI));
        rotateY(map(D(y), 0, 1, -PI, PI));
        rotateZ(map(D(z), 0, 1, -PI, PI));
        beginShape(TRIANGLE_FAN);
        for (int i = 0; i < tubeRes; i++) {
            double x = tubeX[i] * 100;
            double z = tubeY[i] * 100;
            double u = in.width - (in.width / tubeRes * i);
            fill(i*27%255, i*37%255, 255-(i*17%255), 67);
            stroke(i*27%255, i*37%255, 255-(i*17%255), 220);
            vertex(x, 100, z, u, 0);
            vertex(x, -100 + min(150,(fft[i+2]) * 300), z, u, in.height);
        }
        endShape();
        
    }
    
    @In(1) void fft(PBytes data) throws IOException {
        fft = data.deserialize(float[].class);
    }
    
}
  }
  @ ./noise-warp video:gl:p3d {
    .meta [map graph.x 356 graph.y 113 expose [array amplitude]]
    .code {

    @P(1) @Type.Number(min = 0, max = 1, def = 0.1)
    double amplitude;
    @P(2) @Type.Number(min = 0, max = 1, def = 0.1)
    double speed;
    @P(3) @Type.Number(min = 0, max = 5, def = 2)
    double frequency;
    @P(100)
    Property _time;
    
    void updateUniforms() {
        if (!_time.isAnimating()) {
            _time.set(0).to(86400).in(86400);
        }
        shader.set("time", D(_time));
        shader.set("amplitude", amplitude);
        shader.set("speed", speed);
        shader.set("frequency", frequency);
    }

    
    // BOILERPLATE BELOW
    @In(0)
    PImage in;
    @P(0)
    @Type.String(mime = GLSL_FRAGMENT_MIME, template = DEFAULT_FRAGMENT_SHADER)
    @OnChange("updateShader")
    @Config.Port(false)
    String fragment;

    PShader shader;

    @Override
    public void setup() {
        updateShader();
    }

    @Override
    public void draw() {
        if (shader == null) {
            shader = createShader(DEFAULT_VERTEX_SHADER,
                    fragment.isEmpty() ? DEFAULT_FRAGMENT_SHADER : fragment);
        }
        shader(shader);
        updateUniforms();
        image(in, 0, 0);
        resetShader();
    }

    void updateShader() {
        shader = null;
    }

}
    .fragment {
varying vec4 vertTexCoord;
uniform sampler2D texture;
uniform float time;
uniform float amplitude;
uniform float speed;
uniform float frequency;

            //
            // Description : Array and textureless GLSL 2D/3D/4D simplex
            // noise functions.
            // Author : Ian McEwan, Ashima Arts.
            // Maintainer : ijm
            // Lastmod : 20110822 (ijm)
            // License : Copyright (C) 2011 Ashima Arts. All rights reserved.
            // Distributed under the MIT License. See LICENSE file.
            // https://github.com/ashima/webgl-noise
            //

            vec3 mod289(vec3 x) {
             return x - floor(x * (1.0 / 289.0)) * 289.0;
            }

            vec4 mod289(vec4 x) {
             return x - floor(x * (1.0 / 289.0)) * 289.0;
            }

            vec4 permute(vec4 x) {
             return mod289(((x*34.0)+1.0)*x);
            }

            vec4 taylorInvSqrt(vec4 r)
            {
                return 1.79284291400159 - 0.85373472095314 * r;
            }
                                             
            float snoise(vec3 v)
            {
                const vec2 C = vec2(1.0/6.0, 1.0/3.0) ;
                const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
                
                // First corner
                vec3 i = floor(v + dot(v, C.yyy) );
                vec3 x0 = v - i + dot(i, C.xxx) ;
                
                // Other corners
                vec3 g = step(x0.yzx, x0.xyz);
                vec3 l = 1.0 - g;
                vec3 i1 = min( g.xyz, l.zxy );
                vec3 i2 = max( g.xyz, l.zxy );
                
                // x0 = x0 - 0.0 + 0.0 * C.xxx;
                // x1 = x0 - i1 + 1.0 * C.xxx;
                // x2 = x0 - i2 + 2.0 * C.xxx;
                // x3 = x0 - 1.0 + 3.0 * C.xxx;
                vec3 x1 = x0 - i1 + C.xxx;
                vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
                vec3 x3 = x0 - D.yyy; // -1.0+3.0*C.x = -0.5 = -D.y
                
                // Permutations
                i = mod289(i);
                vec4 p = permute( permute( permute(
                                                   i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
                                          + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
                                 + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
                
                // Gradients: 7x7 points over a square, mapped onto an octahedron.
                // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
                float n_ = 0.142857142857; // 1.0/7.0
                vec3 ns = n_ * D.wyz - D.xzx;
                
                vec4 j = p - 49.0 * floor(p * ns.z * ns.z); // mod(p,7*7)
                
                vec4 x_ = floor(j * ns.z);
                vec4 y_ = floor(j - 7.0 * x_ ); // mod(j,N)
                
                vec4 x = x_ *ns.x + ns.yyyy;
                vec4 y = y_ *ns.x + ns.yyyy;
                vec4 h = 1.0 - abs(x) - abs(y);
                
                vec4 b0 = vec4( x.xy, y.xy );
                vec4 b1 = vec4( x.zw, y.zw );
                
                //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
                //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
                vec4 s0 = floor(b0)*2.0 + 1.0;
                vec4 s1 = floor(b1)*2.0 + 1.0;
                vec4 sh = -step(h, vec4(0.0));
                
                vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
                vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
                
                vec3 p0 = vec3(a0.xy,h.x);
                vec3 p1 = vec3(a0.zw,h.y);
                vec3 p2 = vec3(a1.xy,h.z);
                vec3 p3 = vec3(a1.zw,h.w);
                
                //Normalise gradients
                vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
                p0 *= norm.x;
                p1 *= norm.y;
                p2 *= norm.z;
                p3 *= norm.w;
                
                // Mix final noise value
                vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
                m = m * m;
                return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                             dot(p2,x2), dot(p3,x3) ) );
            }
            // end of noise functions
                                         
            void main()
            {
                vec2 texCoords = vertTexCoord.st + vec2(
                    amplitude * (snoise(vec3(frequency * vertTexCoord.st.s, frequency * vertTexCoord.st.t, speed * time))),
                    amplitude * (snoise(vec3(frequency * vertTexCoord.st.s + 17.0, frequency * vertTexCoord.st.t, speed * time)))
                );
                vec2 pos = 0.5 - vertTexCoord.st;  
                gl_FragColor = texture2D(texture, texCoords); 
            }}
    .amplitude 0.21839080459770116
    .speed 0.05172413793103448
    .frequency 1.264367816091954
    ._time 408.776502792
  }
  @ ./hsv video:gl:p2d {
    .meta [map graph.x 416 graph.y 319]
    .code {

    @P(1) @Type.Number(min=0, max=360, def=0) double hue;
    @P(2) @Type.Number(min=0, max=2, def=1) double saturation;
    @P(3) @Type.Number(min=0, max=2, def=1) double value;
    
    void updateUniforms() {
         shader.set("hue", hue);
         shader.set("saturation", saturation);
         shader.set("value", value);
    }

    
    // BOILERPLATE BELOW
    @In(0)
    PImage in;
    @P(0)
    @Type.String(mime = GLSL_FRAGMENT_MIME, template = DEFAULT_FRAGMENT_SHADER)
    @OnChange("updateShader")
    @Config.Port(false)
    String fragment;

    PShader shader;

    @Override
    public void setup() {
        updateShader();
    }

    @Override
    public void draw() {
        if (shader == null) {
            shader = createShader(DEFAULT_VERTEX_SHADER,
                    fragment.isEmpty() ? DEFAULT_FRAGMENT_SHADER : fragment);
        }
        shader(shader);
        updateUniforms();
        image(in, 0, 0);
        resetShader();
    }

    void updateShader() {
        shader = null;
    }

}
    .fragment {// https://gamedev.stackexchange.com/a/59808
uniform sampler2D texture;

uniform vec2 texOffset;

uniform float hue;
uniform float saturation;
uniform float value;

varying vec4 vertColor;
varying vec4 vertTexCoord;

vec3 rgb2hsv(vec3 c) {
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main() {
    vec4 textureColor = texture2D(texture, vertTexCoord.st) * vertColor;
    vec3 fragRGB = textureColor.rgb;
    vec3 fragHSV = rgb2hsv(fragRGB).xyz;
    fragHSV.x += hue / 360.0;
    fragHSV.y *= saturation;
    fragHSV.z *= value;
    fragRGB = hsv2rgb(fragHSV);
    gl_FragColor = vec4(fragRGB, textureColor.a);
}}
    .hue 128.27586206896552
    .saturation 0.9655172413793104
    .value 1.0574712643678161
  }
  @ ./gl-text video:gl:p2d {
    .meta [map graph.x 984 graph.y 387]
    .code {

    @P(1) @Config.Port(false) PFont font;
    @P(2) String text;
    @P(3) @Config.Port(false) @Type.Integer(min=1,max=256,def=14) int fontSize;
    @P(4) @Type.Number(min=0, max=1, def=0.5) double alignX;
    @P(5) @Type.Number(min=0, max=1, def=0.5) double alignY;
    @P(6) @Type.Number(min=0, max=1, def=1) double r;
    @P(7) @Type.Number(min=0, max=1, def=1) double g;
    @P(8) @Type.Number(min=0, max=1, def=1) double b;
    
    @Override
    public void draw() {
        if (font == null || text.isEmpty()) {
            return;
        }
        textFont(font, fontSize);
        fill(r*255, g*255, b*255);
        double textHeight = textAscent() + textDescent();
        text(text, width*alignX - textWidth(text)*alignX, alignY*(height-textHeight) + textAscent());
    }
}
    .font [file "resources/Futura.ttc"]
    .text "About: Original music composed and performed live May 30, 2025 More info:: Haawke.com"
    .font-size 22
    .align-x 0.27586206896551724
    .align-y 0.9655172413793104
  }
  @ ./gl-source1 video:gl:p2d {
    .meta [map graph.x 88 graph.y 342]
    .code {

    @P(1)
    @Type.Number(min = 0, max = 1, def = 0.5)
    double x;
    @P(2)
    @Type.Number(min = 0, max = 1, def = 0.5)
    double y;
    @P(3)
    @Config.Port(false)
    boolean mouseInput;

    void updateUniforms() {
        shader.set("time", millis() / 1000.0);
        if (mouseInput) {
            x = (double) mouseX / width;
            y = 1.0 - ((double) mouseY / height);
        }
        shader.set("mouse", x, y);
    }

    // BOILERPLATE BELOW
    @P(0)
    @Type.String(mime = GLSL_FRAGMENT_MIME, template = DEF_FRAG)
    @OnChange("updateShader")
    @Config.Port(false)
    String fragment;

    PShader shader, oldShader;

    final String DEF_FRAG
            = "uniform float time;\n"
            + "uniform vec2 mouse;\n"
            + "uniform vec2 resolution;\n"
            + "\n"
            + "void main() {\n"
            + "    // fragment position\n"
            + "    vec2 pos = gl_FragCoord.xy/resolution.xy;\n"
            + "    vec2 dist = mouse - pos;\n"
            + "    vec3 white = vec3(1.0 - length(dist));\n"
            + "    gl_FragColor = vec4(white, 1.0);\n"
            + "}";

    @Override
    public void setup() {
        updateShader();
        noStroke();
    }

    @Override
    public void draw() {
        if (shader == null) {
            try {
                shader = createShader(DEFAULT_VERTEX_SHADER,
                    fragment.isEmpty() ? DEF_FRAG : fragment);
                shader(shader);
            } catch(Exception ex) {
                log(ERROR, ex);
                shader = oldShader;
                if (shader != null) {
                    shader(shader); 
                } else {
                    return;
                }
            }
        } else {
            shader(shader);
        }
        updateUniforms();
        rect(0, 0, width, height);
        resetShader();
    }

    void updateShader() {
        oldShader = shader;
        shader = null;
    }

}
    .fragment {
uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;

//.h
vec3 sim(vec3 p,float s);
vec2 rot(vec2 p,float r);
vec2 rotsim(vec2 p,float s);

//nice stuff :)
vec2 makeSymmetry(vec2 p){
   vec2 ret=p;
   ret=rotsim(ret,sin(time*0.3)*2.0+3.0);
   ret.x += mouse.x-0.5;
   ret.y += mouse.y-0.5;
   return ret;
}

float makePoint(float x,float y,float fx,float fy,float sx,float sy,float t){
   float xx=x+cos(t*fx)*sx;
   float yy=y-sin(t*fy)*sy;
   return 0.5/sqrt(abs(x*xx+yy*yy));
}



//util functions
const float PI=3.14159265;

vec3 sim(vec3 p,float s){
   vec3 ret=p;
   ret=p+s/2.0;
   ret=fract(ret/s)*s-s/2.0;
   return ret;
}

vec2 rot(vec2 p,float r){
   vec2 ret;
   ret.x=p.x*cos(r)-p.y*sin(r);
   ret.y=p.x*sin(r)+p.y*cos(r);
   return ret;
}

vec2 rotsim(vec2 p,float s){
   vec2 ret=p;
   ret=rot(p,-PI/(s*0.5));
   ret=rot(p,floor(atan(ret.x,ret.y)/PI*s)*(PI/s));
   return ret;
}
//Util stuff end

void main( void ) {

   vec2 p=(gl_FragCoord.xy/resolution.x)*2.0-vec2(1.0,resolution.y/resolution.x);

   p=p*0.7;
  
   p=makeSymmetry(p);
   
   float x=p.x;
   float y=p.y;
   
   float t=time*0.5;

   float a=
       makePoint(x,y,3.3,2.9,0.3,0.3,t);
   a=a+makePoint(x,y,1.9,2.0,0.4,0.4,t);
   a=a+makePoint(x,y,0.8,0.7,0.4,0.5,t);
   a=a+makePoint(x,y,2.3,0.1,0.6,0.3,t);
   a=a+makePoint(x,y,0.8,1.7,0.5,0.4,t);
   a=a+makePoint(x,y,0.3,1.0,0.4,0.4,t);
   a=a+makePoint(x,y,1.4,1.7,0.4,0.5,t);
   a=a+makePoint(x,y,1.3,2.1,0.6,0.3,t);
   a=a+makePoint(x,y,1.8,1.7,0.5,0.4,t);   
   
   float b=
       makePoint(x,y,1.2,1.9,0.3,0.3,t);
   b=b+makePoint(x,y,0.7,2.7,0.4,0.4,t);
   b=b+makePoint(x,y,1.4,0.6,0.4,0.5,t);
   b=b+makePoint(x,y,2.6,0.4,0.6,0.3,t);
   b=b+makePoint(x,y,0.7,1.4,0.5,0.4,t);
   b=b+makePoint(x,y,0.7,1.7,0.4,0.4,t);
   b=b+makePoint(x,y,0.8,0.5,0.4,0.5,t);
   b=b+makePoint(x,y,1.4,0.9,0.6,0.3,t);
   b=b+makePoint(x,y,0.7,1.3,0.5,0.4,t);

   float c=
       makePoint(x,y,3.7,0.3,0.3,0.3,t);
   c=c+makePoint(x,y,1.9,1.3,0.4,0.4,t);
   c=c+makePoint(x,y,0.8,0.9,0.4,0.5,t);
   c=c+makePoint(x,y,1.2,1.7,0.6,0.3,t);
   c=c+makePoint(x,y,0.3,0.6,0.5,0.4,t);
   c=c+makePoint(x,y,0.3,0.3,0.4,0.4,t);
   c=c+makePoint(x,y,1.4,0.8,0.4,0.5,t);
   c=c+makePoint(x,y,0.2,0.6,0.6,0.3,t);
   c=c+makePoint(x,y,1.3,0.5,0.5,0.4,t);
   
   vec3 d=sim(vec3(a,b,c)/19.0,3.0);
   
   gl_FragColor = vec4(d.x,d.y,d.z,1.0);
}}
  }
  @ ./composite-1 video:composite {
    .meta [map graph.x 766 graph.y 51]
    .mode Add
    .mix 0.4540229885057471
    .force-alpha true
  }
  @ ./kaleidoscope video:gl:p2d {
    .meta [map graph.x 631 graph.y 253 expose [array segments]]
    .code {

    @P(1)
    @Type.Number(min = 0, max = 10, def = 1)
    double segments;
    
    void updateUniforms() {
         shader.set("segments", segments);
    }

    
    // BOILERPLATE BELOW
    @In(0)
    PImage in;
    @P(0)
    @Type.String(mime = GLSL_FRAGMENT_MIME, template = DEFAULT_FRAGMENT_SHADER)
    @OnChange("updateShader")
    @Config.Port(false)
    String fragment;

    PShader shader;

    @Override
    public void setup() {
        updateShader();
    }

    @Override
    public void draw() {
        if (shader == null) {
            shader = createShader(DEFAULT_VERTEX_SHADER,
                    fragment.isEmpty() ? DEFAULT_FRAGMENT_SHADER : fragment);
        }
        shader(shader);
        updateUniforms();
        image(in, 0, 0);
        resetShader();
    }

    void updateShader() {
        shader = null;
    }

}
    .fragment {//https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/KaleidoscopePass.cpp

varying vec4 vertTexCoord;
uniform sampler2D texture;
uniform float segments;
             
void main() {
  vec2 uv =vertTexCoord.st;
  vec2 normed = 2.0 * uv - 1.0;
  float r = length(normed);
  float theta = atan(normed.y / abs(normed.x));
  theta *= segments;
  vec2 newUv = (vec2(r * cos(theta), r * sin(theta)) + 1.0) / 2.0;        
  gl_FragColor = texture2D(texture, newUv);
}}
    .segments 0.5172413793103449
  }
  @ ./composite-2 video:composite {
    .meta [map graph.x 1040 graph.y 51]
    .mix 0.0
    .force-alpha true
  }
  @ ./gl-text1 video:gl:p2d {
    .meta [map graph.x 780 graph.y 387]
    .code {

    @P(1) @Config.Port(false) PFont font;
    @P(2) String text;
    @P(3) @Config.Port(false) @Type.Integer(min=1,max=256,def=14) int fontSize;
    @P(4) @Type.Number(min=0, max=1, def=0.5) double alignX;
    @P(5) @Type.Number(min=0, max=1, def=0.5) double alignY;
    @P(6) @Type.Number(min=0, max=1, def=1) double r;
    @P(7) @Type.Number(min=0, max=1, def=1) double g;
    @P(8) @Type.Number(min=0, max=1, def=1) double b;
    
    @Override
    public void draw() {
        if (font == null || text.isEmpty()) {
            return;
        }
        textFont(font, fontSize);
        fill(r*255, g*255, b*255);
        double textHeight = textAscent() + textDescent();
        text(text, width*alignX - textWidth(text)*alignX, alignY*(height-textHeight) + textAscent());
    }
}
    .font [file "resources/Futura.ttc"]
    .text Haawke
    .font-size 66
    .align-x 0.05172413793103448
    .align-y 0.9080459770114943
    .r 0.0
    .g 0.603448275862069
  }
  ~ ./fft-vis!out ./fft-vis!in
  ~ ./fft-vis!out ./noise-warp!in
  ~ ./kaleidoscope!out ./composite-1!in
  ~ ./composite-1!out ./output-1!in
  ~ ./hsv!out ./kaleidoscope!in
  ~ ./noise-warp!out ./hsv!in
  ~ ./gl-text1!out ./output-1!in
  ~ ./gl-text!out ./output-1!in
}
